yhats_diff <- rep(-Inf, ncol(data))
for (tmp_variable in open_variables) {
current_data <- data
current_data[,tmp_variable] <- new_data[,tmp_variable]
yhats[[tmp_variable]] <- predict.function(model, current_data, times)
#yhats[[tmp_variable]] <- predict.function(model, current_data, ...)
yhats_diff[tmp_variable] <- abs(baseline_yhat - mean(yhats[[tmp_variable]], na.rm =T))
#yhats_diff[tmp_variable] <- abs(baseline_yhat - mean(yhats[[tmp_variable]]))
}
important_variables[i] <- which.max(yhats_diff)
important_yhats[[i]] <- yhats[[which.max(yhats_diff)]]
data[, important_variables[i]] <- new_data[, important_variables[i]]
open_variables <- setdiff(open_variables, which.max(yhats_diff))
}
View(important_yhats)
i<-1
yhats <- list()
yhats_diff <- rep(-Inf, ncol(data))
# set variable indicators
open_variables <- 1:ncol(data)
tmp_variable <- 1
current_data <- data
newdata
current_data[,tmp_variable] <- new_data[,tmp_variable]
data <- data[,-c(1,2)]
newdata <- newdata[,-c(1,2)]
new_observation <- new_observation[,-c(1,2)]
# set target distribution
new_data <- new_observation[rep(1L, nrow(data)),]
# set target
target_yhat <- predict.function(model, new_observation, ...)
target_yhat <- predict.function(model, new_observation)
baseline_yhat <- mean(predict.function(model, data, times), na.rm = TRUE)
# set variable indicators
open_variables <- 1:ncol(data)
important_variables <- c()
important_yhats <- list()
for (i in 1:ncol(data)) {
yhats <- list()
yhats_diff <- rep(-Inf, ncol(data))
for (tmp_variable in open_variables) {
current_data <- data
current_data[,tmp_variable] <- new_data[,tmp_variable]
yhats[[tmp_variable]] <- predict.function(model, current_data, times)
#yhats[[tmp_variable]] <- predict.function(model, current_data, ...)
yhats_diff[tmp_variable] <- abs(baseline_yhat - mean(yhats[[tmp_variable]], na.rm =T))
#yhats_diff[tmp_variable] <- abs(baseline_yhat - mean(yhats[[tmp_variable]]))
}
important_variables[i] <- which.max(yhats_diff)
important_yhats[[i]] <- yhats[[which.max(yhats_diff)]]
data[, important_variables[i]] <- new_data[, important_variables[i]]
open_variables <- setdiff(open_variables, which.max(yhats_diff))
}
# set variable indicators
open_variables <- 1:ncol(data)
important_variables <- c()
important_yhats <- list()
yhats <- list()
yhats_diff <- rep(-Inf, ncol(data))
for (tmp_variable in open_variables) {
current_data <- data
current_data[,tmp_variable] <- new_data[,tmp_variable]
yhats[[tmp_variable]] <- predict.function(model, current_data, times)
#yhats[[tmp_variable]] <- predict.function(model, current_data, ...)
yhats_diff[tmp_variable] <- abs(baseline_yhat - mean(yhats[[tmp_variable]], na.rm =T))
#yhats_diff[tmp_variable] <- abs(baseline_yhat - mean(yhats[[tmp_variable]]))
}
yhats_diff
i <- 1
tmp_variable<-1
current_data <- data
current_data[,tmp_variable] <- new_data[,tmp_variable]
yhats[[tmp_variable]] <- predict.function(model, current_data, times)
yhats
#yhats[[tmp_variable]] <- predict.function(model, current_data, ...)
yhats_diff[tmp_variable] <- abs(baseline_yhat - mean(yhats[[tmp_variable]], na.rm =T))
important_variables[i] <- which.max(yhats_diff)
important_yhats[[i]] <- yhats[[which.max(yhats_diff)]]
data[, important_variables[i]] <- new_data[, important_variables[i]]
open_variables <- setdiff(open_variables, which.max(yhats_diff))
open_variables <- 1:ncol(data)
important_variables <- c()
important_yhats <- list()
for (i in 1:ncol(data)) {
yhats <- list()
yhats_diff <- rep(-Inf, ncol(data))
for (tmp_variable in open_variables) {
current_data <- data
current_data[,tmp_variable] <- new_data[,tmp_variable]
yhats[[tmp_variable]] <- predict.function(model, current_data, times)
#yhats[[tmp_variable]] <- predict.function(model, current_data, ...)
yhats_diff[tmp_variable] <- abs(baseline_yhat - mean(yhats[[tmp_variable]], na.rm =T))
#yhats_diff[tmp_variable] <- abs(baseline_yhat - mean(yhats[[tmp_variable]]))
}
important_variables[i] <- which.max(yhats_diff)
important_yhats[[i]] <- yhats[[which.max(yhats_diff)]]
data[, important_variables[i]] <- new_data[, important_variables[i]]
open_variables <- setdiff(open_variables, which.max(yhats_diff))
}
varNames <- colnames(data)[important_variables]
varValues <- sapply(new_observation[,important_variables], as.character)
contributions <- diff(c(baseline_yhat, sapply(important_yhats, mean)))
broken_sorted <- data.frame(variable = paste("+", varNames,  "=", varValues),
contribution = contributions,
variable_name = varNames,
variable_value = varValues)
broken_sorted
open_variables <- 1:ncol(data)
important_variables <- c()
important_yhats <- list()
i <- 1
tmp_variable <- 1
yhats <- list()
yhats_diff <- rep(-Inf, ncol(data))
for (tmp_variable in open_variables) {
current_data <- data
current_data[,tmp_variable] <- new_data[,tmp_variable]
yhats[[tmp_variable]] <- predict.function(model, current_data, times)
#yhats[[tmp_variable]] <- predict.function(model, current_data, ...)
yhats_diff[tmp_variable] <- abs(baseline_yhat - mean(yhats[[tmp_variable]], na.rm =T))
#yhats_diff[tmp_variable] <- abs(baseline_yhat - mean(yhats[[tmp_variable]]))
}
yhats_diff
# set target distribution
new_data <- new_observation[rep(1L, nrow(data)),]
yhats <- list()
yhats_diff <- rep(-Inf, ncol(data))
for (tmp_variable in open_variables) {
current_data <- data
current_data[,tmp_variable] <- new_data[,tmp_variable]
yhats[[tmp_variable]] <- predict.function(model, current_data, times)
#yhats[[tmp_variable]] <- predict.function(model, current_data, ...)
yhats_diff[tmp_variable] <- abs(baseline_yhat - mean(yhats[[tmp_variable]], na.rm =T))
#yhats_diff[tmp_variable] <- abs(baseline_yhat - mean(yhats[[tmp_variable]]))
}
yhats
yhats_diff
View(new_data)
target_yhat <- predict.function(model, new_observation)
target_yhat <- predict.function(model, new_observation, times = 2)
#target_yhat <- predict.function(model, new_observation, times = 2)
baseline_yhat <- mean(predict.function(model, data, times), na.rm = TRUE)
# set variable indicators
open_variables <- 1:ncol(data)
important_variables <- c()
important_yhats <- list()
for (i in 1:ncol(data)) {
yhats <- list()
yhats_diff <- rep(-Inf, ncol(data))
for (tmp_variable in open_variables) {
current_data <- data
current_data[,tmp_variable] <- new_data[,tmp_variable]
yhats[[tmp_variable]] <- predict.function(model, current_data, times)
#yhats[[tmp_variable]] <- predict.function(model, current_data, ...)
yhats_diff[tmp_variable] <- abs(baseline_yhat - mean(yhats[[tmp_variable]], na.rm =T))
#yhats_diff[tmp_variable] <- abs(baseline_yhat - mean(yhats[[tmp_variable]]))
}
important_variables[i] <- which.max(yhats_diff)
important_yhats[[i]] <- yhats[[which.max(yhats_diff)]]
data[, important_variables[i]] <- new_data[, important_variables[i]]
open_variables <- setdiff(open_variables, which.max(yhats_diff))
}
yhats_diff
open_variables <- 1:ncol(data)
important_variables <- c()
important_yhats <- list()
devtools::document()
install()
library(survxai)
library(rms)
library(randomForestSRC)
data(pbc, package = "randomForestSRC")
predict_times <- function(model, new_observation, times){
prob <- rms::survest(model, new_observation, times=times)$surv
return(prob)
}
cph_model <- cph(Surv(days/365, status)~., data=pbc[1:300,], surv=TRUE)
surve_cph <- surv_explain(model = cph_model,
data = pbc, time = pbc$days/365, status = pbc$status,
predict_function = predict_times)
View(surve_cph)
explainer <- surve_cph
surv_breakdown <- function(explainer, new_observation, times = 1){
new_pred <- function(model, data){
explainer$predict_function(model, data, times)
}
broken(explainer$model, new_observation, explainer$data, predict.function = new_pred)
}
surv_breakdown(surve_cph, pbc[1,-c(1,2)])
traceback()
model <- cph_model
new_observation <- pbc[1,-c(1,2)]
View(pbc)
predict_times <- function(model, new_observation, times=1){
prob <- rms::survest(model, new_observation, times=times)$surv
return(prob)
}
predict.times <- function(model, new_observation, times=1){
prob <- rms::survest(model, new_observation, times=times)$surv
return(prob)
}
predict.function <- function(model, new_observation, times=1){
prob <- rms::survest(model, new_observation, times=times)$surv
return(prob)
}
# set target distribution
new_data <- new_observation[rep(1L, nrow(data)),]
data <- pbc
data <- pbc[,-c(1,2)]
# set target distribution
new_data <- new_observation[rep(1L, nrow(data)),]
View(new_data)
# set target
target_yhat <- predict.function(model, new_observation, ...)
# set target
target_yhat <- predict.function(model, new_observation)
target_yhat
#target_yhat <- predict.function(model, new_observation, times = 2)
baseline_yhat <- mean(predict.function(model, data), na.rm = TRUE)
baseline_yhat
predict.function(model, data
)
# set variable indicators
open_variables <- 1:ncol(data)
important_variables <- c()
important_yhats <- list()
for (i in 1:ncol(data)) {
yhats <- list()
yhats_diff <- rep(-Inf, ncol(data))
for (tmp_variable in open_variables) {
current_data <- data
current_data[,tmp_variable] <- new_data[,tmp_variable]
yhats[[tmp_variable]] <- predict.function(model, current_data, times)
#yhats[[tmp_variable]] <- predict.function(model, current_data, ...)
yhats_diff[tmp_variable] <- abs(baseline_yhat - mean(yhats[[tmp_variable]], na.rm =T))
#yhats_diff[tmp_variable] <- abs(baseline_yhat - mean(yhats[[tmp_variable]]))
}
important_variables[i] <- which.max(yhats_diff)
important_yhats[[i]] <- yhats[[which.max(yhats_diff)]]
data[, important_variables[i]] <- new_data[, important_variables[i]]
open_variables <- setdiff(open_variables, which.max(yhats_diff))
}
open_variables <- 1:ncol(data)
important_variables <- c()
important_yhats <- list()
for (i in 1:ncol(data)) {
yhats <- list()
yhats_diff <- rep(-Inf, ncol(data))
for (tmp_variable in open_variables) {
current_data <- data
current_data[,tmp_variable] <- new_data[,tmp_variable]
yhats[[tmp_variable]] <- predict.function(model, current_data)
#yhats[[tmp_variable]] <- predict.function(model, current_data, ...)
yhats_diff[tmp_variable] <- abs(baseline_yhat - mean(yhats[[tmp_variable]], na.rm =T))
#yhats_diff[tmp_variable] <- abs(baseline_yhat - mean(yhats[[tmp_variable]]))
}
important_variables[i] <- which.max(yhats_diff)
important_yhats[[i]] <- yhats[[which.max(yhats_diff)]]
data[, important_variables[i]] <- new_data[, important_variables[i]]
open_variables <- setdiff(open_variables, which.max(yhats_diff))
}
yhats_diff
important_variables
important_yhats
varNames <- colnames(data)[important_variables]
varValues <- sapply(new_observation[,important_variables], as.character)
contributions <- diff(c(baseline_yhat, sapply(important_yhats, mean)))
broken_sorted <- data.frame(variable = paste("+", varNames,  "=", varValues),
contribution = contributions,
variable_name = varNames,
variable_value = varValues)
broken_sorted
baseline_yhat
pbc <- pbc[complete.cases(pbc),]
data <- pbc[,-c(1,2)]
new_observation <- data[1,]
surv_breakdown <- function(explainer, new_observation, times = 1){
new_pred <- function(model, data){
explainer$predict_function(model, data, times)
}
broken(explainer$model, new_observation, explainer$data, predict.function = new_pred)
}
data(pbc, package = "randomForestSRC")
pbc <- pbc[complete.cases(pbc),]
predict_times <- function(model, new_observation, times=1){
prob <- rms::survest(model, new_observation, times=times)$surv
return(prob)
}
cph_model <- cph(Surv(days/365, status)~., data=pbc[1:300,], surv=TRUE)
surve_cph <- surv_explain(model = cph_model,
data = pbc, time = pbc$days/365, status = pbc$status,
predict_function = predict_times)
surv_breakdown(surve_cph, pbc[1,])
surv_breakdown <- function(explainer, new_observation, times = 1){
broken_in_time <- list()
for(time in times){
new_pred <- function(model, data){
explainer$predict_function(model, data, time)
}
broken_out <- broken(explainer$model, new_observation, explainer$data, predict.function = new_pred)
broken_in_time[i] <- broken_out
}
return(broken_in_time)
}
surv_breakdown(surve_cph, pbc[1,], times = c(1,2,3))
surv_breakdown <- function(explainer, new_observation, times = 1){
broken_in_time <- list()
for(time in times){
new_pred <- function(model, data){
explainer$predict_function(model, data, time)
}
broken_out <- broken(explainer$model, new_observation, explainer$data, predict.function = new_pred)
broken_in_time <- c(broken_in_time, broken_out)
}
return(broken_in_time)
}
surv_breakdown(surve_cph, pbc[1,], times = c(1,2,3))
surv_breakdown(surve_cph, pbc[1,], times = c(1,2,3)) -> broken
View(broken)
surv_breakdown <- function(explainer, new_observation, times = 1){
broken_in_time <- list()
for(i in 1:length(times)){
time <- times[i]
new_pred <- function(model, data){
explainer$predict_function(model, data, time)
}
broken_out <- broken(explainer$model, new_observation, explainer$data, predict.function = new_pred)
broken_in_time[i] <-broken_out
}
return(broken_in_time)
}
surv_breakdown(surve_cph, pbc[1,], times = c(1,2,3)) -> broken_list
View(broken_list)
x <- broken(cph_model, pbc[1,])
x <- broken(cph_model, pbc[1,], predict.function(=predict_times()))
x <- broken(cph_model, pbc[1,], predict.function=predict_times)
x <- broken(cph_model, pbc[1,-c(1,2)], data = pbc[,-c(1,2)], predict.function=predict_times)
View(x)
broken_list[1]
broken_list[[1]]
surv_breakdown <- function(explainer, new_observation, times = 1){
broken_in_time <- list()
for(i in 1:length(times)){
time <- times[i]
new_pred <- function(model, data){
explainer$predict_function(model, data, time)
}
broken_out <- broken(explainer$model, new_observation, explainer$data, predict.function = new_pred)
broken_in_time[[i]] <-broken_out
}
return(broken_in_time)
}
surv_breakdown(surve_cph, pbc[1,], times = c(1,2,3)) -> broken_list
View(broken_list)
View(broken_list)
names(broken_list) <- paste0("time = ", c(1,2,3))
View(broken_list)
surv_breakdown <- function(explainer, new_observation, times = 1){
broken_in_time <- list()
for(i in 1:length(times)){
time <- times[i]
new_pred <- function(model, data){
explainer$predict_function(model, data, time)
}
broken_out <- broken(explainer$model, new_observation, explainer$data, predict.function = new_pred)
broken_in_time[[i]] <-broken_out
}
names(broken_in_time) <- paste0("time_",times)
return(broken_in_time)
}
surv_breakdown(surve_cph, pbc[1,], times = c(1,2,3)) -> broken_list
View(broken_list)
View(broken_list)
surv_breakdown <- function(explainer, new_observation, times = 1){
broken_in_time <- list()
for(i in 1:length(times)){
time <- times[i]
new_pred <- function(model, data){
explainer$predict_function(model, data, time)
}
broken_out <- broken(explainer$model, new_observation, explainer$data, predict.function = new_pred)
broken_in_time[[i]] <-broken_out
}
names(broken_in_time) <- paste0("time_",times)
return(list(surv_explainer = explainer, broken_list = broken_in_time))
}
surv_breakdown(surve_cph, pbc[1,], times = c(1,2,3)) -> broken_list
View(broken_list)
devtools::document()
surv_breakdown <- function(explainer, new_observation, times = 1){
broken_in_time <- list()
for(i in 1:length(times)){
time <- times[i]
new_pred <- function(model, data){
explainer$predict_function(model, data, time)
}
broken_out <- broken(explainer$model, new_observation, explainer$data, predict.function = new_pred)
broken_in_time[[i]] <- broken_out
}
names(broken_in_time) <- paste0("time_",times)
broken_list <- list(surv_explainer = explainer, broken_list = broken_in_time)
class(broken_list) <- "surv_breakdown"
return(broken_list)
}
devtools::document()
covr::package_coverage()
check()
devtools::document()
check()
x<-surve_cph
predicted_values <- predict(x$model, x$data)
predicted_values[1:12]
plot(predicted_values)
plot(x$model)
x <- survfit(x$model)
x <- survfit(x$model, y=TRUE)
?survfit
cph_model <- cph(Surv(days/365, status)~., data=pbc[1:300,], surv=TRUE, y=TRUE)
surve_cph <- surv_explain(model = cph_model,
data = pbc, time = pbc$days/365, status = pbc$status,
predict_function = predict_times)
broken_list <- surv_breakdown(surve_cph, pbc[1,], times = c(1,2))
z <- survfit(x$model)
x <- surve_cph
z <- survfit(x$model)
cph_model <- cph(Surv(days/365, status)~., data=pbc[1:300,], surv=TRUE, x = TRUE, y=TRUE)
surve_cph <- surv_explain(model = cph_model,
data = pbc, time = pbc$days/365, status = pbc$status,
predict_function = predict_times)
x <- surve_cph
z <- survfit(x$model)
plot(z)
View(z)
survplot(x$model)
survplot(cph_model)
new_pred <- function(model, data){
x$predict_function(model, data, times)
}
times=1
predicted_values <- mean(new_pred(x$model, x$data), na.rm=T)
predicted_values
new_pred(x$model, x$data)
times <- c(1,2)
new_pred(x$model, x$data) -> z
z[,1:10]
z[1:10,]
times <- c(1,2,3,4)
new_pred <- function(model, data){
x$predict_function(model, data, times)
}
predicted_values <- mean(new_pred(x$model, x$data), na.rm=T)
predicted_values
predicted_values <- new_pred(x$model, x$data)
predicted_values <- colMeans(predicted_values, na.rm=T)
predicted_values
plot(predicted_values)
plot(predicted_values, "l")
?plot
plot(predicted_values, type = "l")
?seq
View(x)
min(x$time)
max(x$time)
View(pbc)
41/365
times <- seq(min(x$time), max(x$time), length.out = 100)
predicted_values <- new_pred(x$model, x$data)
predicted_values <- colMeans(predicted_values, na.rm=T)
plot(predicted_values)
plot(predicted_values, type="l")
times <- seq(min(x$time), max(x$time), by=1)
predicted_values <- new_pred(x$model, x$data)
predicted_values <- colMeans(predicted_values, na.rm=T)
plot(predicted_values, type="l")
plot(predicted_values)
x<-broken_list
surv_breakdown <- function(explainer, new_observation, times = 1){
broken_in_time <- list()
for(i in 1:length(times)){
time <- times[i]
new_pred <- function(model, data){
explainer$predict_function(model, data, time)
}
broken_out <- broken(explainer$model, new_observation, explainer$data, predict.function = new_pred)
broken_in_time[[i]] <- broken_out
}
names(broken_in_time) <- paste0("time_",times)
broken_list <- list(new_observation = new_observation, surv_explainer = explainer, broken_list = broken_in_time)
class(broken_list) <- "surv_breakdown"
return(broken_list)
}
surv_breakdown(surve_cph, pbc[1,]) -> z
View(z)
class(z)
times <- c(1,2)
surv_breakdown <- function(explainer, new_observation, times = 1){
broken_in_time <- list()
for(i in 1:length(times)){
time <- times[i]
new_pred <- function(model, data){
explainer$predict_function(model, data, time)
}
broken_out <- broken(explainer$model, new_observation, explainer$data, predict.function = new_pred)
broken_in_time[[i]] <- broken_out
}
names(broken_in_time) <- paste0("time_",times)
broken_list <- list(new_observation = new_observation, surv_explainer = explainer, broken_list = broken_in_time)
class(broken_list) <- "surv_breakdown"
return(broken_list)
}
surv_breakdown(surve_cph, pbc[1,]) -> z
View(z)
