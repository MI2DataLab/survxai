important_yhats <- list()
for (i in 1:ncol(data)) {
yhats <- list()
yhats_diff <- rep(-Inf, ncol(data))
for (tmp_variable in open_variables) {
current_data <- data
current_data[,tmp_variable] <- new_data[,tmp_variable]
yhats[[tmp_variable]] <- predict.function(model, current_data, ...)
yhats_diff[tmp_variable] <- abs(baseline_yhat - mean(yhats[[tmp_variable]]))
}
important_variables[i] <- which.max(yhats_diff)
important_yhats[[i]] <- yhats[[which.max(yhats_diff)]]
data[, important_variables[i]] <- new_data[, important_variables[i]]
open_variables <- setdiff(open_variables, which.max(yhats_diff))
}
varNames <- colnames(data)[important_variables]
varValues <- sapply(new_observation[,important_variables], as.character)
contributions <- diff(c(baseline_yhat, sapply(important_yhats, mean)))
broken_sorted <- data.frame(variable = paste("+", varNames,  "=", varValues),
contribution = contributions,
variable_name = varNames,
variable_value = varValues)
broken_sorted
}
broken_go_down <- function(model, new_observation, data,
predict.function = predict, ...) {
# set target distribution
new_data <- new_observation[rep(1L, nrow(data)),]
# set target
target_yhat <- predict.function(model, new_observation, ...)
baseline_yhat <- mean(predict.function(model, data, ...))
# set variable indicators
open_variables <- 1:ncol(data)
important_variables <- c()
important_yhats <- list()
for (i in 1:ncol(data)) {
yhats <- list()
yhats_diff <- rep(Inf, ncol(data))
for (tmp_variable in open_variables) {
current_data <- new_data
current_data[,tmp_variable] <- data[,tmp_variable]
yhats[[tmp_variable]] <- predict.function(model, current_data, ...)
yhats_diff[tmp_variable] <- abs(target_yhat - mean(yhats[[tmp_variable]]))
}
important_variables[i] <- which.min(yhats_diff)
important_yhats[[i]] <- yhats[[which.min(yhats_diff)]]
new_data[, important_variables[i]] <- data[, important_variables[i]]
open_variables <- setdiff(open_variables, which.min(yhats_diff))
}
varNames <- rev(colnames(data)[important_variables])
varValues <- sapply(rev(new_observation[,important_variables]), as.character)
contributions <- diff(c(rev(sapply(important_yhats, mean)), target_yhat))
broken_sorted <- data.frame(variable = c(paste("-", varNames,  "=", varValues)),
contribution = contributions,
variable_name = varNames,
variable_value = varValues)
broken_sorted
}
model <- explainer$model
new_observation = observation
data = explainer$data
predict.function = explainer$predict_function
baseline = "Intercept"
keep_distributions = FALSE
direction = "up"
baseline = 0
baseline = "Intercept"
"data.frame" %in% class(data)
if ("data.frame" %in% class(data)) {
common_variables <- intersect(colnames(new_observation), colnames(data))
new_observation <- new_observation[,common_variables, drop = FALSE]
data <- data[,common_variables, drop = FALSE]
}
common_variables
if (direction == "up") {
broken_sorted <- broken_go_up(model, new_observation, data,
predict.function, ...)
} else {
broken_sorted <- broken_go_down(model, new_observation, data,
predict.function, ...)
}
if (direction == "up") {
broken_sorted <- broken_go_up(model, new_observation, data,
predict.function)
} else {
broken_sorted <- broken_go_down(model, new_observation, data,
predict.function)
}
explainer$predict_function()
predict.function = new_pred
if (direction == "up") {
broken_sorted <- broken_go_up(model, new_observation, data,
predict.function)
} else {
broken_sorted <- broken_go_down(model, new_observation, data,
predict.function)
}
broken_go_up()
broken_sorted
# set target distribution
new_data <- new_observation[rep(1L, nrow(data)),]
# set target
target_yhat <- predict.function(model, new_observation, ...)
# set target
target_yhat <- predict.function(model, new_observation)
target_yhat
baseline_yhat <- mean(predict.function(model, data))
baseline_yhat
predict.function <- predict_times()
predict.function <- predict_times
explainer$predict_function()
explainer$predict_function
explainer$predict_function(model, data, times = time)
res <- broken(model = explainer$model,
new_observation = observation,
data = explainer$data,
predict.function = new_pred,
baseline = "Intercept", ...)
res <- broken(model = explainer$model,
new_observation = observation,
data = explainer$data,
predict.function = new_pred,
baseline = "Intercept")
# set target distribution
new_data <- new_observation[rep(1L, nrow(data)),]
# set target
target_yhat <- predict.function(model, new_observation)
predict.function <- new_pred
# set target
target_yhat <- predict.function(model, new_observation)
baseline_yhat <- mean(predict.function(model, data))
baseline_yhat <- colMeans(predict.function(model, data))
x <- c(1,2,3,4,5,6)
mean(x)
colMeans(x)
View(res)
as.data.frame(res) ->c
as.data.frame(res) ->z
adata.frame(res) ->z
data.frame(res) ->z
class(res) = "data.frame"
res
names(res)
time <- explainer$y[,1]
new_pred <- function(model, data){
explainer$predict_function(model, data, times = 0)
}
result <- broken(model = explainer$model,
new_observation = observation,
data = explainer$data,
predict.function = new_pred,
baseline = "Intercept")
library(breakDown)
result <- broken(model = explainer$model,
new_observation = observation,
data = explainer$data,
predict.function = new_pred,
baseline = "Intercept")
class(result) <- "data.frame"
result$time <- 0
View(result)
median(explainer$y[,1])
time <- median(explainer$y[,1])
new_pred <- function(model, data){
explainer$predict_function(model, data, times = time)
}
result <- broken(model = explainer$model,
new_observation = observation,
data = explainer$data,
predict.function = new_pred,
baseline = "Intercept")
class(result) <- "data.frame"
View(result)
res <- res[-c(1, nrow(res)),]
View(res)
View(res)
View(res)
View(res)
View(new_data)
View(res)
result <- data.frame(x = numeric(), y = numeric(), variable = character(), label = character())
times <- explainer$y[,1]
for (i in 1:nrow(res)){
variable <- res[i, "variable_name"]
tmp_data[,variable] <-  res[i,"variable_value"]
prediction <- explainer$predict_function(explainer$model, tmp_data, times)
mean_prediction <- data.frame(x = times, y = colMeans(prediction, na.rm=T))
mean_prediction <- rbind(mean_prediction, c(0, 1))
mean_prediction$variable<- variable
mean_prediction$label <- explainer$label
result <- rbind(result, mean_prediction)
}
tmp_data <- explainer$data
for (i in 1:nrow(res)){
variable <- res[i, "variable_name"]
tmp_data[,variable] <-  res[i,"variable_value"]
prediction <- explainer$predict_function(explainer$model, tmp_data, times)
mean_prediction <- data.frame(x = times, y = colMeans(prediction, na.rm=T))
mean_prediction <- rbind(mean_prediction, c(0, 1))
mean_prediction$variable<- variable
mean_prediction$label <- explainer$label
result <- rbind(result, mean_prediction)
}
traceback()
View(predict.function)
View(res)
observation
View(observation)
observation["sex"]
observation[["sex"]]
class(observation["sex"])
z <- observation["sex"]
tmp_data <- explainer$data
for (i in 1:nrow(res)){
variable <- res[i, "variable_name"]
tmp_data[,variable] <-  observation[variable]
prediction <- explainer$predict_function(explainer$model, tmp_data, times)
mean_prediction <- data.frame(x = times, y = colMeans(prediction, na.rm=T))
mean_prediction <- rbind(mean_prediction, c(0, 1))
mean_prediction$variable<- variable
mean_prediction$label <- explainer$label
result <- rbind(result, mean_prediction)
}
for (i in 1:nrow(res)){
variable <- res[i, "variable_name"]
tmp_data[,variable] <-  observation[[variable]]
prediction <- explainer$predict_function(explainer$model, tmp_data, times)
mean_prediction <- data.frame(x = times, y = colMeans(prediction, na.rm=T))
mean_prediction <- rbind(mean_prediction, c(0, 1))
mean_prediction$variable<- variable
mean_prediction$label <- explainer$label
result <- rbind(result, mean_prediction)
}
variable <- res[i, "variable_name"]
variable
factor(variable)
as.character(variable)
variable <- res[i, "variable_name"]
tmp_data[,as.character(variable)] <-  observation[[as.character(variable)]]
View(tmp_data)
for (i in 1:nrow(res)){
variable <- res[i, "variable_name"]
tmp_data[,as.character(variable)] <-  observation[[as.character(variable)]]
prediction <- explainer$predict_function(explainer$model, tmp_data, times)
mean_prediction <- data.frame(x = times, y = colMeans(prediction, na.rm=T))
mean_prediction <- rbind(mean_prediction, c(0, 1))
mean_prediction$variable<- variable
mean_prediction$label <- explainer$label
result <- rbind(result, mean_prediction)
}
View(res)
View(result)
View(result)
times <- sort(explainer$y[,1])
tmp_data <- explainer$data
for (i in 1:nrow(res)){
variable <- res[i, "variable_name"]
tmp_data[,as.character(variable)] <-  observation[[as.character(variable)]]
prediction <- explainer$predict_function(explainer$model, tmp_data, times)
mean_prediction <- data.frame(x = times, y = colMeans(prediction, na.rm=T))
mean_prediction <- rbind(mean_prediction, c(0, 1))
mean_prediction$variable<- variable
mean_prediction$label <- explainer$label
result <- rbind(result, mean_prediction)
}
View(res)
tmp_data <- explainer$data
for (i in 1:nrow(res)){
variable <- res[i, "variable_name"]
tmp_data[,as.character(variable)] <-  observation[[as.character(variable)]]
prediction <- explainer$predict_function(explainer$model, tmp_data, times)
mean_prediction <- data.frame(x = times, y = colMeans(prediction, na.rm=T))
mean_prediction <- rbind(mean_prediction, c(0, 1))
mean_prediction$variable<- variable
mean_prediction$label <- explainer$label
mean_prediction$position <- res[i, "position"]
result <- rbind(result, mean_prediction)
}
View(res)
result <- data.frame(x = numeric(), y = numeric(), variable = character(), label = character(), position = numeric())
times <- sort(explainer$y[,1])
tmp_data <- explainer$data
for (i in 1:nrow(res)){
variable <- res[i, "variable_name"]
tmp_data[,as.character(variable)] <-  observation[[as.character(variable)]]
prediction <- explainer$predict_function(explainer$model, tmp_data, times)
mean_prediction <- data.frame(x = times, y = colMeans(prediction, na.rm=T))
mean_prediction <- rbind(mean_prediction, c(0, 1))
mean_prediction$variable<- variable
mean_prediction$label <- explainer$label
mean_prediction$position <- res[i, "position"]
result <- rbind(result, mean_prediction)
}
View(tmp_data)
#baseline
prediction <- explainer$predict_function(explainer$model, explainer$data, times)
mean_prediction <- data.frame(x = times, y = colMeans(prediction, na.rm=T))
mean_prediction <- rbind(mean_prediction, c(0, 1))
mean_prediction$variable<- variable
prediction <- explainer$predict_function(explainer$model, explainer$data, times)
mean_prediction <- data.frame(x = times, y = colMeans(prediction, na.rm=T))
mean_prediction <- rbind(mean_prediction, c(0, 1))
mean_prediction$variable<- "Intercept"
mean_prediction$label <- explainer$label
mean_prediction$position <- 1
result <- rbind(result, mean_prediction)
#one observation
prediction <- explainer$predict_function(explainer$model, observation, times)
#one observation
prediction <- explainer$predict_function(explainer$model, observation, times)
mean_prediction <- data.frame(x = times, y = prediction[1,])
View(mean_prediction)
time <- median(explainer$y[,1])
new_pred <- function(model, data){
explainer$predict_function(model, data, times = time)
}
res<- broken(model = explainer$model,
new_observation = observation,
data = explainer$data,
predict.function = new_pred,
baseline = "Intercept")
class(res) <- "data.frame"
res <- res[-c(1, nrow(res)),]
result <- data.frame(x = numeric(), y = numeric(), variable = character(), label = character(), position = numeric())
times <- sort(explainer$y[,1])
#baseline
prediction <- explainer$predict_function(explainer$model, explainer$data, times)
mean_prediction <- data.frame(x = times, y = colMeans(prediction, na.rm=T))
mean_prediction <- rbind(mean_prediction, c(0, 1))
mean_prediction$variable<- "Intercept"
mean_prediction$label <- explainer$label
mean_prediction$position <- 1
result <- rbind(result, mean_prediction)
#one observation
prediction <- explainer$predict_function(explainer$model, observation, times)
mean_prediction <- data.frame(x = times, y = prediction[1,])
mean_prediction <- rbind(mean_prediction, c(0, 1))
mean_prediction$variable<- "Observation"
mean_prediction$label <- explainer$label
mean_prediction$position <- nrow(res)+2
tmp_data <- explainer$data
for (i in 1:nrow(res)){
variable <- res[i, "variable_name"]
tmp_data[,as.character(variable)] <-  observation[[as.character(variable)]]
prediction <- explainer$predict_function(explainer$model, tmp_data, times)
mean_prediction <- data.frame(x = times, y = colMeans(prediction, na.rm=T))
mean_prediction <- rbind(mean_prediction, c(0, 1))
mean_prediction$variable<- variable
mean_prediction$label <- explainer$label
mean_prediction$position <- res[i, "position"]
result <- rbind(result, mean_prediction)
}
View(result)
class(res) <- c("surv_prediction_breakdown_explainer", "data.frame")
res
document()
document()
install()
broken_prediction <- prediction_breakdown(surve_cph, pbc[1,-c(1,2)])
library(survxai)
library(rms)
library(randomForestSRC)
data(pbc, package = "randomForestSRC")
pbc <- pbc[complete.cases(pbc),]
predict_times <- function(model, data, times){
prob <- rms::survest(model, data, times = times)$surv
return(prob)
}
cph_model <- cph(Surv(days/365, status)~., data=pbc, surv=TRUE, x = TRUE, y=TRUE)
cph_model2 <- cph(Surv(days/365, status)~sex+bili, data=pbc, surv=TRUE, x = TRUE, y=TRUE)
surve_cph <- explain(model = cph_model,
data = pbc, y = Surv(pbc$days/365, pbc$status),
predict_function = predict_times)
broken_prediction <- prediction_breakdown(surve_cph, pbc[1,-c(1,2)])
View(broken_prediction)
plot.surv_prediction_breakdown_explainer <- function(x, ...){
df <- data.frame(x)
dfl <- list(...)
if (length(dfl) > 0) {
for (resp in dfl) {
class(resp) <- "data.frame"
df <- rbind(df, resp)
}
}
ggplot(df, aes(x=x, y=y, col = position))+
geom_step()+
labs(title = "BreakDown plot",
x = "time",
y = "mean survival probability",
col = position) +
facet_wrap(~label) +
theme_bw()
}
library(ggplot2)
plot(broken_prediction)
plot.surv_prediction_breakdown_explainer <- function(x, ...){
df <- data.frame(x)
dfl <- list(...)
if (length(dfl) > 0) {
for (resp in dfl) {
class(resp) <- "data.frame"
df <- rbind(df, resp)
}
}
ggplot(df, aes(x=x, y=y, col = position))+
geom_step()+
labs(title = "BreakDown plot",
x = "time",
y = "mean survival probability",
col =  "variable") +
facet_wrap(~label) +
theme_bw()
}
plot(broken_prediction)
plot.surv_prediction_breakdown_explainer <- function(x, ...){
df <- data.frame(x)
dfl <- list(...)
if (length(dfl) > 0) {
for (resp in dfl) {
class(resp) <- "data.frame"
df <- rbind(df, resp)
}
}
ggplot(df, aes(x=x, y=y, col = factor(position)))+
geom_step()+
labs(title = "BreakDown plot",
x = "time",
y = "mean survival probability",
col =  "variable") +
facet_wrap(~label) +
theme_bw()
}
plot(broken_prediction)
plot.surv_prediction_breakdown_explainer <- function(x, ...){
df <- data.frame(x)
dfl <- list(...)
if (length(dfl) > 0) {
for (resp in dfl) {
class(resp) <- "data.frame"
df <- rbind(df, resp)
}
}
ggplot(df, aes(x=x, y=y, col = factor(variable)))+
geom_step()+
labs(title = "BreakDown plot",
x = "time",
y = "mean survival probability",
col =  "variable") +
facet_wrap(~label) +
geom_label(aes())
theme_bw()
}
plot(broken_prediction)
plot(broken_prediction)
plot.surv_prediction_breakdown_explainer <- function(x, ...){
df <- data.frame(x)
dfl <- list(...)
if (length(dfl) > 0) {
for (resp in dfl) {
class(resp) <- "data.frame"
df <- rbind(df, resp)
}
}
ggplot(df, aes(x=x, y=y, col = factor(variable)))+
geom_step()+
labs(title = "BreakDown plot",
x = "time",
y = "mean survival probability",
col =  "variable") +
facet_wrap(~label) +
theme_bw()
}
plot(broken_prediction)
View(broken_prediction)
explainer <- surve_cph
observation <- pbc[1, -c(1,2)]
time <- median(explainer$y[,1])
new_pred <- function(model, data){
explainer$predict_function(model, data, times = time)
}
res<- broken(model = explainer$model,
new_observation = observation,
data = explainer$data,
predict.function = new_pred,
baseline = "Intercept")
class(res) <- "data.frame"
View(res)
document()
document()
install()
broken_prediction <- prediction_breakdown(surve_cph, pbc[1,-c(1,2)])
plot(broken_prediction)
library(survxai)
library(rms)
library(randomForestSRC)
data(pbc, package = "randomForestSRC")
pbc <- pbc[complete.cases(pbc),]
predict_times <- function(model, data, times){
prob <- rms::survest(model, data, times = times)$surv
return(prob)
}
cph_model <- cph(Surv(days/365, status)~., data=pbc, surv=TRUE, x = TRUE, y=TRUE)
cph_model2 <- cph(Surv(days/365, status)~sex+bili, data=pbc, surv=TRUE, x = TRUE, y=TRUE)
surve_cph <- explain(model = cph_model,
data = pbc, y = Surv(pbc$days/365, pbc$status),
predict_function = predict_times)
broken_prediction <- prediction_breakdown(surve_cph, pbc[1,-c(1,2)])
View(broken_prediction)
document()
install()
broken_prediction <- prediction_breakdown(surve_cph, pbc[1,-c(1,2)])
plot(broken_prediction)
