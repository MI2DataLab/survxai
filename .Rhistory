install.packages("randomForestSRC")
install.packages("survreg")
install.packages("survival")
load("C:/Users/Aleksandra Grudziaz.DESKTOP-1PK02R5/Documents/MI2 DataLab prace/survXAI/data_model.rda")
View(data_model)
load("C:/Users/Aleksandra Grudziaz.DESKTOP-1PK02R5/Downloads/daneCOI(1).rda")
colnames(daneCOI) <- make.names(colnames(daneCOI))
daneCOI<- daneCOI[which(!daneCOI$F5.Stadium..uicc.2009. %in% c("brak","brak danych")),]
daneCOI$F5.Stadium..uicc.2009. <- factor(daneCOI$F5.Stadium..uicc.2009.)
library(survival)
library(survminer)
library(lubridate)
followup <- ymd(daneCOI$Data.zgonu)
followup[is.na(followup)] <- ymd("2016-12-31")
daneCOI$obserwacja <- followup - ymd(daneCOI$F1.Data.rozpoczecia.leczenia)
daneCOI$wiek <- as.numeric((ymd(daneCOI$F1.Data.rozpoczecia.leczenia) - ymd(daneCOI$P.Data.urodzenia))/365.25)
View(daneCOI)
daneModelowanie <- daneCOI[,c(2,3,4,6,7,8, 11,12,14,15,21,23,130,131,132)]
daneModelowanie = filter(daneModelowanie, wiek>0)
daneModelowanie = dplyr::filter(daneModelowanie, wiek>0)
daneModelowanie = dplyr::filter(daneModelowanie, obserwacja>0)
save(daneModelowanie, file="daneModelowanie.rda")
library(randomForestSRC)
library(survival)
model_coxph <- coxph(Surv(obserwacja/365, F10.zyje == "NIE")~., data=daneModelowanie)
View(daneModelowanie)
model_coxph <- coxph(Surv(obserwacja/365, F10.zyje == "NIE")~ P.Plec+F1.Palenie.papierosow+F1.Azbest+F1.Rodzina.nowotwory+F1.Paczkolata, data=daneModelowanie)
model_coxph <- coxph(Surv(obserwacja/365, F10.zyje == "NIE")~ P.Plec+F1.Palenie.papierosów+F1.Azbest+F1.Rodzina.nowotwory+F1.Paczkolata, data=daneModelowanie)
model_randomForest <- rfsrc(Surv(obserwacja/365, F10.zyje == "NIE")~ P.Plec+F1.Palenie.papierosów+F1.Azbest+F1.Rodzina.nowotwory+F1.Paczkolata, data=daneModelowanie)
daneModelowanie$F1.Rodzina.nowotwory <- as.factor(daneModelowanie$F1.Rodzina.nowotwory)
model_coxph <- coxph(Surv(obserwacja/365, F10.zyje == "NIE")~ P.Plec+F1.Palenie.papierosów+F1.Azbest+F1.Rodzina.nowotwory+F1.Paczkolata, data=daneModelowanie)
model_randomForest <- rfsrc(Surv(obserwacja/365, F10.zyje == "NIE")~ P.Plec+F1.Palenie.papierosów+F1.Azbest+F1.Rodzina.nowotwory+F1.Paczkolata, data=daneModelowanie)
traceback()
data(pbc)
View(pbc)
data(pbc, package="randomForestSRC")
View(pbc)
model_randomForest <- rfsrc(Surv(obserwacja/365, F10.zyje == "NIE")~ P.Plec+F1.Palenie.papierosów+F1.Azbest+F1.Rodzina.nowotwory+F1.Paczkolata, data=daneModelowanie, nsplit = 10, ntree = 150)
data(wihs, package = "randomForestSRC")
View(wihs)
rfsrc()
rfsrc
model_randomForest <- rfsrc(Surv(obserwacja/365, F10.zyje == "NIE")~ P.Plec+F1.Palenie.papierosów+F1.Azbest+F1.Rodzina.nowotwory+F1.Paczkolata, data=daneModelowanie, nsplit = 10, ntree = 150)
model_coxph <- survreg(Surv(obserwacja/365, F10.zyje == "NIE")~ P.Plec+F1.Palenie.papierosów+F1.Azbest+F1.Rodzina.nowotwory+F1.Paczkolata, data=daneModelowanie)
model_survreg <- survreg(Surv(obserwacja/365, F10.zyje == "NIE")~ P.Plec+F1.Palenie.papierosów+F1.Azbest+F1.Rodzina.nowotwory+F1.Paczkolata, data=daneModelowanie)
model_randomForest <- rfsrc(Surv(obserwacja/365, F10.zyje == "NIE")~ P.Plec+F1.Palenie.papierosów+F1.Azbest+F1.Rodzina.nowotwory+F1.Paczkolata, data=daneModelowanie, nsplit = 10, ntree = 150)
View(model_coxph)
model_coxph <- coxph(Surv(obserwacja/365, F10.zyje == "NIE")~ P.Plec+F1.Palenie.papierosów+F1.Azbest+F1.Rodzina.nowotwory+F1.Paczkolata, data=daneModelowanie)
View(model_survreg)
plot.survival(model_coxph)
plot(model_coxph)
model_coxph <- coxph(Surv(obserwacja/365, F10.zyje == "NIE")~ P.Plec+F1.Palenie.papierosów+F1.Azbest+F1.Rodzina.nowotwory+F1.Paczkolata, data=daneModelowanie)
model_survreg <- survreg(Surv(obserwacja/365, F10.zyje == "NIE")~ P.Plec+F1.Palenie.papierosów+F1.Azbest+F1.Rodzina.nowotwory+F1.Paczkolata, data=daneModelowanie)
plot.coxph(model_coxph)
library(survival)
plot.coxph(model_coxph)
plot(survfit(model_coxph))
install.packages("Survminer")
install.packages("survminer")
library(survminer)
getwd()
setwd("C:/Users/Aleksandra Grudziaz.DESKTOP-1PK02R5/Documents/Github/survxai")
library(randomForestSRC)
install.packages("randomForestSRC")
library(randomForestSRC)
data(pbc, package = "randomForestSRC")
rfsrc_model <- rfsrc(Surv(days/365,status) ~ ., pbc, nsplit = 10, importance = TRUE)
library(survival)
survreg_model <- survreg(Surv(days/365, status)~., data=pbc)
library(survminer)
predict(survreg_model)
lines(predict(survreg_model))
plot(predict(survreg_model))
??predict.survreg
?flexsurvreg
?flexsurv::flexsurvreg
flexsurv::flexsurvreg(survreg_model)
require(survival)
s <- with(lung,Surv(time,status))
sWei  <- survreg(s ~ as.factor(sex)+age+ph.ecog+wt.loss+ph.karno,dist='weibull',data=lung)
fitKM <- survfit(s ~ sex,data=lung)
plot(fitKM)
lines(predict(sWei, newdata=list(sex=1,
age = 1,
ph.ecog = 1,
ph.karno = 90,
wt.loss = 2),
type="quantile",
p=seq(.01,.99,by=.01)),
seq(.99,.01,by=-.01),
col="blue")
lines(predict(sWei, newdata=list(sex=2,
age = 1,
ph.ecog = 1,
ph.karno = 90,
wt.loss = 2),
type="quantile",
p=seq(.01,.99,by=.01)),
seq(.99,.01,by=-.01),
col="red")
plot()
plot(predict(sWei, newdata=list(sex=1,
age = 1,
ph.ecog = 1,
ph.karno = 90,
wt.loss = 2),
type="quantile",
p=seq(.01,.99,by=.01)),
seq(.99,.01,by=-.01),
col="blue")
plot(predict(sWei, newdata=list(sex=2,
age = 1,
ph.ecog = 1,
ph.karno = 90,
wt.loss = 2),
type="line",
p=seq(.01,.99,by=.01)),
seq(.99,.01,by=-.01),
col="red")
plot(predict(sWei, newdata=list(sex=2,
age = 1,
ph.ecog = 1,
ph.karno = 90,
wt.loss = 2),
type="quantile",
p=seq(.01,.99,by=.01)),
type = "l"
seq(.99,.01,by=-.01),
col="red")
plot(predict(sWei, newdata=list(sex=2,
age = 1,
ph.ecog = 1,
ph.karno = 90,
wt.loss = 2),
type="quantile",
p=seq(.01,.99,by=.01)),
type = "l",
seq(.99,.01,by=-.01),
col="red")
pred <- predict(sWei, newdata=list(sex=2,
age = 1,
ph.ecog = 1,
ph.karno = 90,
wt.loss = 2),
type="quantile",
p=seq(.01,.99,by=.01))
pred
plot(,
type = "l",
seq(.99,.01,by=-.01),
col="red")
plot(pred,
type = "l",
seq(.99,.01,by=-.01),
col="red")
plot(pred,
type = "step",
seq(.99,.01,by=-.01),
col="red")
View(survreg_model)
?survreg
predict(survreg())
predict(survreg_model)
predict(survreg_model, type = "link")
predict(survreg_model, type = "linear")
predict(survreg_model, type = "response")
predict(survreg_model, type = "response")
survreg_model$y
View(pbc)
pbc$days/365
log(pbc$days/365)
log(pbc$days/365) == survreg_model$y[1]
survreg_model$y[1]
log(pbc$days/365) == survreg_model$y
c(log(pbc$days/365), survreg_model$y)
pred <- predict(sWei, newdata=list(sex=2,
age = 1,
ph.ecog = 1,
ph.karno = 90,
wt.loss = 2),
type="response",
p=seq(.00,.2000,by=.5))
pred
pred <- predict(sWei, newdata=list(sex=2,
age = 1,
ph.ecog = 1,
ph.karno = 90,
wt.loss = 2),
type="response",
p=seq(.00,2000,by=5))
pred
pred <- predict(sWei, newdata=list(sex=2,
age = 1,
ph.ecog = 1,
ph.karno = 90,
wt.loss = 2),
type="response")
pred
pred <- predict(sWei, newdata=list(sex=2,
age = 1,
ph.ecog = 1,
ph.karno = 90,
wt.loss = 2),
type="unquantile")
pred <- predict(sWei, newdata=list(sex=2,
age = 1,
ph.ecog = 1,
ph.karno = 90,
wt.loss = 2),
type="unquantile",
p=seq(.01,.99,by=.01))
pred <- predict(sWei, newdata=list(sex=2,
age = 1,
ph.ecog = 1,
ph.karno = 90,
wt.loss = 2),
type="uquantile",
p=seq(.01,.99,by=.01))
pred
pred <- predict(sWei, newdata=list(sex=2,
age = 1,
ph.ecog = 1,
ph.karno = 90,
wt.loss = 2),
type="response")
pred
pred <- predict(survreg_model, newdata=list(sex=2,
age = 1,
ph.ecog = 1,
ph.karno = 90,
wt.loss = 2),
type="response")
pred <- predict(survreg_model, newdata=pbc[3,],
type="response")
pred
pred <- predict(survreg_model, newdata=pbc[3,])
pred
#' wine_lm_explainer4 <- explain(wine_lm_model4, data = wine, label = "model_4v")
#' wine_lm_explainer4
#'
#'  \dontrun{
#' library("randomForest")
#' wine_rf_model4 <- randomForest(quality ~ pH + residual.sugar + sulphates + alcohol, data = wine)
#' wine_rf_explainer4 <- explain(wine_rf_model4, data = wine, label = "model_rf")
#' wine_rf_explainer4
#'  }
#'
surv_explain <- function(model, data = NULL, time = NULL, status = NULL, predict_function = yhat, ..., label = tail(class(model), 1)) {
if (is.null(data)) {
possible_data <- try(model.frame(model), silent = TRUE)
if (class(possible_data) != "try-error") {
data <- possible_data
}
}
# if data is in the tibble format then needs to be translated to data.frame
if ("tbl" %in% class(data)) {
data <- as.data.frame(data)
}
surv_explainer <- list(model = model,
data = data,
time = time,
predict_function = predict_function,
class = class(model),
label = label)
surv_explainer <- c(surv_explainer, list(...))
class(surv_explainer) <- "surv_explainer"
surv_explainer
}
warnings()
#' \item \code{class} class/classes of a model
#' \item \code{label} label, by default it's the last value from the \code{class} vector, but may be set to any character.
#' }
#'
#' @rdname surv_explain
#' @export
#' @importFrom stats predict
#' @importFrom utils head tail
#'
#'
surv_explain <- function(model, data = NULL, time = NULL, status = NULL, predict_function = yhat, ..., label = tail(class(model), 1)) {
if (is.null(data)) {
possible_data <- try(model.frame(model), silent = TRUE)
if (class(possible_data) != "try-error") {
data <- possible_data
}
}
# if data is in the tibble format then needs to be translated to data.frame
if ("tbl" %in% class(data)) {
data <- as.data.frame(data)
}
surv_explainer <- list(model = model,
data = data,
time = time,
predict_function = predict_function,
class = class(model),
label = label)
surv_explainer <- c(surv_explainer, list(...))
class(surv_explainer) <- "surv_explainer"
surv_explainer
}
surv_explain(survreg_model, pbc, pbc$days/365, pbc$status)
surv_explain(survreg_model, pbc, pbc$days/365, pbc$status, predict_function = predict)
library(devtools)
library(devtools)
document()
document()
document()
document()
document()
document()
document()
document()
document()
check()
document()
check()
document()
check()
document()
check()
