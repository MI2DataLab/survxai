getwd()
setwd("C:/Users/Aleksandra Grudziaz.DESKTOP-1PK02R5/Documents/GitHub/survxai")
devtools::check()
document()
devtools::document()
devtools::check()
library(survxai)
library(rms)
library(randomForestSRC)
data(pbc, package = "randomForestSRC")
pbc <- pbc[complete.cases(pbc),]
cph_model <- cph(Surv(days/365, status)~., data=pbc[1:300,], surv=TRUE, x = TRUE, y=TRUE)
predict(cph_model)
library()
library("devtools")
document()
install()
document()
install()
surve_cph <- explain(model = cph_model,
data = pbc, time = pbc$days/365, status = pbc$status,
predict_function = predict_times)
surve_cph <- explain(model = cph_model,
data = pbc, y = Surv(days/365, status),
predict_function = predict_times)
Surv(days/365, status)
Surv(pbc[1:300,]$days/365, pbc[1:300,]$status)
surve_cph <- explain(model = cph_model,
data = pbc, y = Surv(pbc[1:300,]$days/365, pbc[1:300,]$status),
predict_function = predict_times)
surve_cph <- explain(model = cph_model,
data = pbc, y = Surv(pbc[1:300,]$days/365, pbc[1:300,]$status))
surve_cph
predict(cph_model)
predict(cph_model) -> aaa
aaa[5]
predict_times <- function(model, new_observation){
prob <- rms::survest(model, new_observation)$surv
return(prob)
}
aaa <- predict_times(cph_model, pbc)
aaa <- predict_times(cph_model, pbc[1,])
aaa <- predict_times(cph_model, pbc[2,])
aaa <- predict_times(cph_model, pbc[3,])
?rms::survest
length(unique(pbc$time))
length(unique(pbc$days))
predict_times <- function(model, new_observation){
prob <- rms::survest(model, new_observation, times = c(1,2))$surv
return(prob)
}
aaa <- predict_times(cph_model, pbc)
aaa
View(cph_model)
predict_times <- function(model, new_observation){
prob <- rms::survest(model, new_observation, times =model$time)$surv
return(prob)
}
aaa <- predict_times(cph_model, pbc)
View(aaa)
View(pbc)
aaa <- predict_times(cph_model, pbc[,-1:2])
aaa <- predict_times(cph_model, pbc[,-c(1:2)])
head(aaa)
surve_cph$y
aaa <- surve_cph$y
head(aaa)
as.data.frame(aaa) -> bbb
View(bbb)
aaa[1:3,1:3]
aaa[1:3,1:2]
surv_partial <- function(explainer, variable){
times <- explainer$y[,1]
tmp_data <- data
values <- unique(data[,variable])
partial_data <- data.frame(x = numeric(), y = numeric(), value = character())
for(val in values){
tmp_data[,variable] <- val
prediction <- explainer$predict_function(explainer$model, tmp_data, times)
mean_prediction <- data.frame(x = times, y = colMeans(prediction, na.rm=T))
mean_prediction$value <- val
partial_data <- rbind(partial_data, mean_prediction)
}
partial_data$type <- "pdp"
partial_data$label <- explainer$label
partial_data$var <- variable
}
predict_times <- function(model, data, times){
prob <- rms::survest(model, data, times = times)$surv
return(prob)
}
surve_cph <- explain(model = cph_model,
data = pbc, y = Surv(pbc[1:300,]$days/365, pbc[1:300,]$status),
predict_function = predict_times())
surve_cph <- explain(model = cph_model,
data = pbc, y = Surv(pbc[1:300,]$days/365, pbc[1:300,]$status),
predict_function = predict_times)
View(pbc)
aaa <- surv_partial(surve_cph, stage)
aaa <- surv_partial(surve_cph, "stage")
explainer <- surve_cph
variable <- "stage"
times <- explainer$y[,1]
tmp_data <- data
values <- unique(data[,variable])
values <- unique(explainer$data[,variable])
partial_data <- data.frame(x = numeric(), y = numeric(), value = character())
for(val in values){
tmp_data[,variable] <- val
prediction <- explainer$predict_function(explainer$model, tmp_data, times)
mean_prediction <- data.frame(x = times, y = colMeans(prediction, na.rm=T))
mean_prediction$value <- val
partial_data <- rbind(partial_data, mean_prediction)
}
partial_data <- data.frame(x = numeric(), y = numeric(), value = character())
for(val in values){
tmp_data[,explainer$variable] <- val
prediction <- explainer$predict_function(explainer$model, tmp_data, times)
mean_prediction <- data.frame(x = times, y = colMeans(prediction, na.rm=T))
mean_prediction$value <- val
partial_data <- rbind(partial_data, mean_prediction)
}
times <- explainer$y[,1]
tmp_data <- explainer$data
values <- unique(explainer$data[,variable])
partial_data <- data.frame(x = numeric(), y = numeric(), value = character())
for(val in values){
tmp_data[,variable] <- val
prediction <- explainer$predict_function(explainer$model, tmp_data, times)
mean_prediction <- data.frame(x = times, y = colMeans(prediction, na.rm=T))
mean_prediction$value <- val
partial_data <- rbind(partial_data, mean_prediction)
}
warnings
warnings()
cph_model <- cph(Surv(days/365, status)~., data=pbc, surv=TRUE, x = TRUE, y=TRUE)
surve_cph <- explain(model = cph_model,
data = pbc, y = Surv(pbc$days/365, pbc$status),
predict_function = predict_times)
explainer <- surve_cph
times <- explainer$y[,1]
tmp_data <- explainer$data
values <- unique(explainer$data[,variable])
partial_data <- data.frame(x = numeric(), y = numeric(), value = character())
for(val in values){
tmp_data[,variable] <- val
prediction <- explainer$predict_function(explainer$model, tmp_data, times)
mean_prediction <- data.frame(x = times, y = colMeans(prediction, na.rm=T))
mean_prediction$value <- val
partial_data <- rbind(partial_data, mean_prediction)
}
partial_data$type <- "pdp"
partial_data$label <- explainer$label
partial_data$var <- explainer$variable
View(mean_prediction)
View(pbc)
View(partial_data)
times <- sort(explainer$y[,1])
tmp_data <- explainer$data
values <- unique(explainer$data[,variable])
partial_data <- data.frame(x = numeric(), y = numeric(), value = character())
for(val in values){
tmp_data[,variable] <- val
prediction <- explainer$predict_function(explainer$model, tmp_data, times)
mean_prediction <- data.frame(x = times, y = colMeans(prediction, na.rm=T))
mean_prediction$value <- val
partial_data <- rbind(partial_data, mean_prediction)
}
partial_data$type <- "pdp"
partial_data$label <- explainer$label
partial_data$var <- explainer$variable
View(partial_data)
document()
document()
install()
data(pbc, package = "randomForestSRC")
pbc <- pbc[complete.cases(pbc),]
predict_times <- function(model, data, times){
prob <- rms::survest(model, data, times = times)$surv
return(prob)
}
cph_model <- cph(Surv(days/365, status)~., data=pbc, surv=TRUE, x = TRUE, y=TRUE)
surve_cph <- explain(model = cph_model,
data = pbc, y = Surv(pbc$days/365, pbc$status),
predict_function = predict_times)
svr_cph <- variable_response(surve_cph, "sex")
document()
install()
svr_cph <- variable_response(surve_cph, "sex")
View(svr_cph)
cph_model <- cph(Surv(days/365, status)~., data=pbc, surv=TRUE, x = TRUE, y=TRUE)
surve_cph <- explain(model = cph_model,
data = pbc, y = Surv(pbc$days/365, pbc$status),
predict_function = predict_times)
svr_cph <- variable_response(surve_cph, "sex")
library(survxai)
library(rms)
library(randomForestSRC)
data(pbc, package = "randomForestSRC")
pbc <- pbc[complete.cases(pbc),]
predict_times <- function(model, data, times){
prob <- rms::survest(model, data, times = times)$surv
return(prob)
}
cph_model <- cph(Surv(days/365, status)~., data=pbc, surv=TRUE, x = TRUE, y=TRUE)
surve_cph <- explain(model = cph_model,
data = pbc, y = Surv(pbc$days/365, pbc$status),
predict_function = predict_times)
surve_cph_null_data <- surv_explain(model = cph_model, time = pbc$days/365, status = pbc$status,
predict_function = predict_times)
#broken_list <- surv_breakdown(surve_cph, pbc[1,], times = c(1,2))
svr_cph <- variable_response(surve_cph, "sex")
svr_cph_group <- surv_variable_response(surve_cph, "bili")
# plot_explainer <- plot(surve_cph)
# plot_curves <- plot(broken_list)
# plot_curves_and_table <- plot(broken_list, table=T)
# plot_var_resp <- plot(svr_cph)
library(survxai)
library(rms)
library(randomForestSRC)
data(pbc, package = "randomForestSRC")
pbc <- pbc[complete.cases(pbc),]
predict_times <- function(model, data, times){
prob <- rms::survest(model, data, times = times)$surv
return(prob)
}
cph_model <- cph(Surv(days/365, status)~., data=pbc, surv=TRUE, x = TRUE, y=TRUE)
surve_cph <- explain(model = cph_model,
data = pbc, y = Surv(pbc$days/365, pbc$status),
predict_function = predict_times)
#broken_list <- surv_breakdown(surve_cph, pbc[1,], times = c(1,2))
svr_cph <- variable_response(surve_cph, "sex")
explain<- surve_cph
